#pragma once

// Templates to be used with fmtlib

constexpr auto TMPLT_PRAGMA_0 = "#pragma once";
constexpr auto TMPLT_COUT_NEWLINE_0 = "std::cout << std::endl;";
constexpr auto TMPLT_COUT_1 = "std::cout << \"{0}\";";
constexpr auto TMPLT_COUT_LINE_1 = "std::cout << \"{0}\" << std::endl;";
constexpr auto TMPLT_PRIVATE_0 = "private:";
constexpr auto TMPLT_PUBLIC_0 = "public:";
constexpr auto TMPLT_NEWLINE_0 = "";
constexpr auto TMPLT_ANGLE_INCLUDE_1 = "#include <{0}>";
constexpr auto TMPLT_QUOTE_INCLUDE_1 = "#include \"{0}\"";
constexpr auto TMPLT_NAMESPACE_1 = "namespace {0}{{";
constexpr auto TMPLT_STRUCT_1 = "struct {0}{{";
constexpr auto TMPLT_CLASS_1 = "class {0} {{";
constexpr auto TMPLT_ENUMCLASS_1 = "enum class {0}{{";
constexpr auto TMPLT_DECLARE_VAR_2 = "{0} {1};";
constexpr auto TMPLT_DEFINE_VAR_2 = "{0} = {1};";
constexpr auto TMPLT_DECDEFINE_VAR_3 = "{0} {1} = {2};";
constexpr auto TMPLT_DECLARE_FUNCTION_4 = "{0} {1}({2}) {3};";
constexpr auto TMPLT_DECLARE_CTOR_2 = "{0}() {1};";
constexpr auto TMPLT_DECLARE_PARAMCTOR_2 = "{0}({1});";
constexpr auto TMPLT_DECLARE_DTOR_2 = "~{0}() {1};";
constexpr auto TMPLT_DEFINE_PARAMCTOR_2 = "{0}::{0}({1}) {{";
constexpr auto TMPLT_DEFINE_CLASSFUNC_5 = "{0} {1}::{2}({3}) {4}{{";
constexpr auto TMPLT_IF_1 = "if ({0}) {{";
constexpr auto TMPLT_FUNC_CALL_2 = "{0}({1});";
constexpr auto TMPLT_FOR_3 = "for ({0}; {1}; {2}) {{";
constexpr auto TMPLT_SWITCH_1 = "switch ({0}) {{";
constexpr auto TMPLT_CASE_1 = "case {0}:";
constexpr auto TMPLT_BREAK_0 = "break;";
constexpr auto TMPLT_INCREMENT_1 = "{0}++;";
constexpr auto TMPLT_EXIT_1 = "exit({0})";
constexpr auto TMPLT_ELSE_0 = "else {";
constexpr auto TMPLT_RETURN_1 = "return {0};";

constexpr auto UTMPLT_STR_1 = "\"{0}\"";
constexpr auto UTMPLT_STATIC_MEMBER_2 = "{0}::{1}";
constexpr auto UTMPLT_OBJECT_MEMBER_2 = "{0}.{1}";
constexpr auto UTMPLT_FUNC_CALL_2 = "{0}({1})";

#define ACC_NAME accumulator
#define ACCPB(X) ACC_NAME.push_back(X)
#define ACCPB_FMT(...) ACCPB(fmt::format(__VA_ARGS__))
#define ACC_PRAGMAONCE ACCPB(TMPLT_PRAGMA_0)
#define ACC_COUT_NEWLINE ACCPB(TMPLT_COUT_NEWLINE_0)
#define ACC_COUT(X) ACCPB_FMT(TMPLT_COUT_1, X)
#define ACC_COUTLN(X) ACCPB_FMT(TMPLT_COUT_LINE_1, X)
#define ACC_AHEADER_INCLUDE(X) ACCPB_FMT(TMPLT_ANGLE_INCLUDE_1, X)
#define ACC_QHEADER_INCLUDE(X) ACCPB_FMT(TMPLT_QUOTE_INCLUDE_1, X)
#define ACC_NEWLINE ACCPB(TMPLT_NEWLINE_0)
#define ACC_PUBLIC ACCPB(TMPLT_PUBLIC_0)
#define ACC_PRIVATE ACCPB(TMPLT_PRIVATE_0)
#define ACC_BRACE_CLOSE ACCPB("}")
#define ACC_BRACESCOLON_CLOSE ACCPB("};")
#define ACC_NAMESPACE_BEGIN(X) ACCPB_FMT(TMPLT_NAMESPACE_1, X)
#define ACC_NAMESPACE_END ACC_BRACE_CLOSE
#define ACC_DECLARE_VAR(TYPE, NAME) ACCPB_FMT(TMPLT_DECLARE_VAR_2, TYPE, NAME)
#define ACC_DEFINE_VAR(NAME, VALUE) ACCPB_FMT(TMPLT_DEFINE_VAR_2, NAME, VALUE)
#define ACC_DECDEFINE_VAR(TYPE, NAME, VALUE) ACCPB_FMT(TMPLT_DECDEFINE_VAR_3, TYPE, NAME, VALUE)
#define ACC_DECLARE_FUNC(PREMOD, NAME, PARAMS, POSTMOD) ACCPB_FMT(TMPLT_DECLARE_FUNCTION_4, PREMOD, NAME, PARAMS, POSTMOD)
#define ACC_STRUCT_BEGIN(X) ACCPB_FMT(TMPLT_STRUCT_1, X)
#define ACC_STRUCT_END ACC_BRACESCOLON_CLOSE
#define ACC_CLASS_BEGIN(X) ACCPB_FMT(TMPLT_CLASS_1, X)
#define ACC_CLASS_END ACC_BRACESCOLON_CLOSE
#define ACC_DECLARE_CTOR(NAME, POSTMOD) ACCPB_FMT(TMPLT_DECLARE_CTOR_2, NAME, POSTMOD)
#define ACC_DECLARE_PARAMCTOR(NAME, PARAMS) ACCPB_FMT(TMPLT_DECLARE_PARAMCTOR_2, NAME, PARAMS)
#define ACC_DECLARE_DTOR(NAME, POSTMOD) ACCPB_FMT(TMPLT_DECLARE_DTOR_2, NAME, POSTMOD)
#define ACC_ENUMCLASS_BEGIN(X) ACCPB_FMT(TMPLT_ENUMCLASS_1, X)
#define ACC_ENUMCLASS_END ACC_BRACESCOLON_CLOSE
#define ACC_DEFINE_PARAMCTOR(CLASS, PARAMS) ACCPB_FMT(TMPLT_DEFINE_PARAMCTOR_2, CLASS, PARAMS)
#define ACC_DEFINE_CLASSFUNC(PREMOD, CLASS, NAME, PARAMS, POSTMOD) ACCPB_FMT(TMPLT_DEFINE_CLASSFUNC_5, PREMOD, CLASS, NAME, PARAMS, POSTMOD)
#define ACC_FUNC_END ACC_BRACE_CLOSE
#define ACC_IF(X) ACCPB_FMT(TMPLT_IF_1, X)
#define ACC_IF_END ACC_BRACE_CLOSE
#define ACC_FUNC_CALL(NAME, PARAMS) ACCPB_FMT(TMPLT_FUNC_CALL_2, NAME, PARAMS)
#define ACC_FOR(INIT, CHECK, INC) ACCPB_FMT(TMPLT_FOR_3, INIT, CHECK, INC)
#define ACC_FOR_END ACC_BRACE_CLOSE
#define ACC_SWITCH(X) ACCPB_FMT(TMPLT_SWITCH_1, X)
#define ACC_SWITCH_END ACC_BRACE_CLOSE
#define ACC_CASE(X) ACCPB_FMT(TMPLT_CASE_1, X)
#define ACC_BREAK ACCPB(TMPLT_BREAK_0)
#define ACC_INCREMENT_VAR(X) ACCPB_FMT(TMPLT_INCREMENT_1, X)
#define ACC_EXIT(CODE) ACCPB_FMT(TMPLT_EXIT_1, CODE)
#define ACC_ELSE ACCPB(TMPLT_ELSE_0)
#define ACC_ELSE_END ACC_BRACE_CLOSE
#define ACC_RETURN(X) ACCPB_FMT(TMPLT_RETURN_1, X)

#define UTIL_STR(X) fmt::format(UTMPLT_STR_1, X)
#define UTIL_STATIC_MEMBER(OWNER, MEMBER) fmt::format(UTMPLT_STATIC_MEMBER_2, OWNER, MEMBER)
#define UTIL_OBJECT_MEMBER(OWNER, MEMBER) fmt::format(UTMPLT_OBJECT_MEMBER_2, OWNER, MEMBER)
#define UTIL_FUNC_CALL(FUNC, PARAMS) fmt::format(UTMPLT_FUNC_CALL_2, FUNC, PARAMS)